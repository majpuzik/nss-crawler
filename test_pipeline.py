#!/usr/bin/env python3
"""
test_pipeline.py
Komplexn√≠ test NSS crawleru
"""

import unittest
import tempfile
import shutil
from pathlib import Path
from datetime import datetime

# Import modul≈Ø
from models import Decision, CrawlerStats
from search_nss import NSSSearcher
from download_nss import NSSDownloader
from storage import DecisionStorage
from indexer import DecisionIndexer
import config


class TestNSSCrawler(unittest.TestCase):
    """Testy pro NSS crawler"""

    @classmethod
    def setUpClass(cls):
        """P≈ô√≠prava p≈ôed testy"""
        # Vytvo≈ôen√≠ doƒçasn√©ho adres√°≈ôe pro testy
        cls.temp_dir = Path(tempfile.mkdtemp())

        # Nastaven√≠ testov√Ωch cest
        cls.original_db = config.DB_PATH
        config.DB_PATH = cls.temp_dir / "test.sqlite"

        print(f"\nüß™ Testovac√≠ prost≈ôed√≠: {cls.temp_dir}")

    @classmethod
    def tearDownClass(cls):
        """√öklid po testech"""
        try:
            # Restore original config
            config.DB_PATH = cls.original_db
            shutil.rmtree(cls.temp_dir)
            print(f"üßπ Vyƒçi≈°tƒõno: {cls.temp_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Chyba p≈ôi √∫klidu: {e}")

    def test_01_decision_model(self):
        """Test datov√©ho modelu Decision"""
        print("\n‚ñ∂Ô∏è  Test 1: Decision model")

        decision = Decision(
            ecli="ECLI:CZ:NSS:2025:TEST.001",
            title="Testovac√≠ rozhodnut√≠",
            date=datetime(2025, 1, 1),
            url="http://test.cz"
        )

        self.assertEqual(decision.ecli, "ECLI:CZ:NSS:2025:TEST.001")
        self.assertIsNotNone(decision.title)

        print("   ‚úÖ Decision model OK")

    def test_02_storage_init(self):
        """Test inicializace datab√°ze"""
        print("\n‚ñ∂Ô∏è  Test 2: Inicializace datab√°ze")

        storage = DecisionStorage(config.DB_PATH)

        # Kontrola, ≈æe DB existuje
        self.assertTrue(config.DB_PATH.exists())

        # Kontrola tabulek
        import sqlite3
        conn = sqlite3.connect(str(config.DB_PATH))
        cursor = conn.cursor()

        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]

        self.assertIn('decisions', tables)
        self.assertIn('decisions_fts', tables)

        conn.close()
        storage.close()

        print("   ‚úÖ Datab√°ze inicializov√°na")

    def test_03_save_and_retrieve(self):
        """Test ukl√°d√°n√≠ a naƒç√≠t√°n√≠"""
        print("\n‚ñ∂Ô∏è  Test 3: Ukl√°d√°n√≠ a naƒç√≠t√°n√≠")

        storage = DecisionStorage(config.DB_PATH)

        # Vytvo≈ôen√≠ testovac√≠ho rozhodnut√≠
        decision = Decision(
            ecli="ECLI:CZ:NSS:2025:TEST.002",
            title="Test ukl√°d√°n√≠",
            date=datetime(2025, 1, 2),
            url="http://test2.cz",
            full_text="Testovac√≠ text rozhodnut√≠ s kl√≠ƒçov√Ωmi slovy: √∫zemn√≠ pl√°n, v√Ωstavba"
        )

        # Ulo≈æen√≠
        result = storage.save_decision(decision)
        self.assertTrue(result)

        # Naƒçten√≠
        loaded = storage.get_decision("ECLI:CZ:NSS:2025:TEST.002")
        self.assertIsNotNone(loaded)
        self.assertEqual(loaded.title, "Test ukl√°d√°n√≠")

        storage.close()

        print("   ‚úÖ Ukl√°d√°n√≠ a naƒç√≠t√°n√≠ OK")

    def test_04_fulltext_search(self):
        """Test fulltextov√©ho vyhled√°v√°n√≠"""
        print("\n‚ñ∂Ô∏è  Test 4: Fulltextov√© vyhled√°v√°n√≠")

        storage = DecisionStorage(config.DB_PATH)

        # P≈ôid√°n√≠ testovac√≠ch rozhodnut√≠
        test_decisions = [
            Decision(
                ecli=f"ECLI:CZ:NSS:2025:FTS.00{i}",
                title=f"Rozhodnut√≠ {i}",
                date=datetime(2025, 1, 1),
                url=f"http://test{i}.cz",
                full_text=text
            )
            for i, text in enumerate([
                "V√Ωstavba v nezastaviteln√© plo≈°e √∫zemn√≠ho pl√°nu",
                "Vƒõtrn√° elektr√°rna a krajinn√Ω r√°z",
                "Rozhodnut√≠ o vyd√°n√≠ stavebn√≠ho povolen√≠"
            ], 1)
        ]

        for decision in test_decisions:
            storage.save_decision(decision)

        # Vyhled√°v√°n√≠
        results = storage.search_fulltext("√∫zemn√≠ pl√°n", limit=10)
        self.assertGreater(len(results), 0)

        results2 = storage.search_fulltext("vƒõtrn√° elektr√°rna", limit=10)
        self.assertGreater(len(results2), 0)

        storage.close()

        print(f"   ‚úÖ Vyhled√°v√°n√≠ OK (nalezeno: {len(results)} a {len(results2)} v√Ωsledk≈Ø)")

    def test_05_statistics(self):
        """Test statistik"""
        print("\n‚ñ∂Ô∏è  Test 5: Statistiky")

        storage = DecisionStorage(config.DB_PATH)
        stats = storage.get_stats()

        self.assertIn('total', stats)
        self.assertGreater(stats['total'], 0)

        storage.close()

        print(f"   ‚úÖ Statistiky OK (celkem: {stats['total']} rozhodnut√≠)")

    def test_06_crawler_stats(self):
        """Test objektu CrawlerStats"""
        print("\n‚ñ∂Ô∏è  Test 6: CrawlerStats")

        stats = CrawlerStats()
        stats.decisions_found = 100
        stats.decisions_downloaded = 95
        stats.decisions_ocr_processed = 90
        stats.decisions_indexed = 90
        stats.errors = 5
        stats.end_time = datetime.now()

        duration = stats.duration()
        self.assertGreaterEqual(duration, 0)

        print("   ‚úÖ CrawlerStats OK")

    def test_07_nss_searcher_init(self):
        """Test inicializace NSSSearcher"""
        print("\n‚ñ∂Ô∏è  Test 7: NSSSearcher inicializace")

        searcher = NSSSearcher(delay=0.5)
        self.assertIsNotNone(searcher.session)
        self.assertEqual(searcher.delay, 0.5)

        print("   ‚úÖ NSSSearcher OK")

    def test_08_downloader_init(self):
        """Test inicializace NSSDownloader"""
        print("\n‚ñ∂Ô∏è  Test 8: NSSDownloader inicializace")

        downloader = NSSDownloader()
        self.assertIsNotNone(downloader.session)

        print("   ‚úÖ NSSDownloader OK")

    def test_09_indexer(self):
        """Test indexeru"""
        print("\n‚ñ∂Ô∏è  Test 9: Indexer")

        indexer = DecisionIndexer()

        decision = Decision(
            ecli="ECLI:CZ:NSS:2025:IDX.001",
            title="Test indexace",
            date=datetime(2025, 1, 1),
            url="http://test.cz",
            full_text="Test indexace dokumentu"
        )

        result = indexer.index_decisions([decision])
        self.assertEqual(result, 1)

        indexer.close()

        print("   ‚úÖ Indexer OK")


if __name__ == "__main__":
    print("\n" + "="*60)
    print("üß™ NSS CRAWLER - TESTOVAC√ç SUITE")
    print("="*60)

    # Spu≈°tƒõn√≠ unit test≈Ø
    print("\nüìç UNIT TESTY")
    print("-"*60)

    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestNSSCrawler)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)

    # V√Ωsledek unit test≈Ø
    if result.wasSuccessful():
        print("\n" + "="*60)
        print("üéâ V≈†ECHNY TESTY √öSPƒö≈†N√â")
        print("="*60)
    else:
        print("\n" + "="*60)
        print("‚ùå Nƒõkter√© testy selhaly")
        print("="*60)
