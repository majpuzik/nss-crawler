#!/usr/bin/env python3
"""
downloader.py
Stahov√°n√≠ pln√Ωch text≈Ø rozhodnut√≠ ze sb√≠rky NSS pomoc√≠ Selenium
"""

import logging
import time
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from models import Decision
from storage import DecisionStorage
from config import DB_PATH, PDF_STORAGE_PATH

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class NSSSbirkaDownloader:
    """Stahov√°n√≠ z ve≈ôejn√© sb√≠rky NSS"""

    def __init__(self):
        self.storage = DecisionStorage(DB_PATH)

        # Selenium setup
        options = Options()
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--headless')

        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=options)

    def search_and_download(self, keywords, limit=10, job_status=None):
        """
        Vyhled√° rozhodnut√≠ v NSS sb√≠rce a st√°hne pln√© texty

        Args:
            keywords: Seznam kl√≠ƒçov√Ωch slov
            limit: Maxim√°ln√≠ poƒçet v√Ωsledk≈Ø
            job_status: JobStatus objekt pro sledov√°n√≠ progress

        Returns:
            Seznam sta≈æen√Ωch rozhodnut√≠
        """
        logger.info(f"üîç Vyhled√°v√°m: {', '.join(keywords)}")

        if job_status:
            job_status.update(0, limit, "P≈ôipojov√°n√≠ k NSS sb√≠rce...")

        try:
            # P≈ôipravit search query
            if len(keywords) == 1:
                search_query = keywords[0]
            else:
                search_query = " ".join(keywords)

            # Otev≈ô√≠t p≈ô√≠mo vyhled√°vac√≠ str√°nku s parametrem
            import urllib.parse
            encoded_query = urllib.parse.quote(search_query)
            search_url = f"http://sbirka.nssoud.cz/cz/vyhledavani?q={encoded_query}"

            logger.info(f"   URL: {search_url}")
            self.driver.get(search_url)
            time.sleep(3)

            try:
                # Poƒçkat na v√Ωsledky
                results = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".list-item"))
                )

                logger.info(f"‚úÖ Nalezeno {len(results)} v√Ωsledk≈Ø")

                decisions = []
                for i, result in enumerate(results[:limit], 1):
                    # Kontrola zru≈°en√≠
                    if job_status and job_status.cancel_requested:
                        logger.info("‚ùå Stahov√°n√≠ zru≈°eno u≈æivatelem")
                        if job_status:
                            job_status.status = "cancelled"
                            job_status.complete()
                        return decisions

                    try:
                        logger.info(f"\nüìÑ V√Ωsledek {i}/{min(limit, len(results))}")

                        if job_status:
                            job_status.update(i, limit, f"Stahuji rozhodnut√≠ {i}/{limit}...")

                        # Naj√≠t odkaz
                        link = result.find_element(By.CSS_SELECTOR, "a")
                        title = link.text.strip()
                        url = link.get_attribute("href")

                        if not url or len(title) < 10:
                            continue

                        logger.info(f"   {title[:80]}...")

                        # Otev≈ô√≠t detail v nov√©m tabu
                        self.driver.execute_script("window.open(arguments[0], '_blank');", url)
                        self.driver.switch_to.window(self.driver.window_handles[-1])
                        time.sleep(2)

                        # Extrahovat text
                        body = self.driver.find_element(By.TAG_NAME, "body")
                        full_text = body.text

                        if len(full_text) > 500:
                            # Zkontrolovat duplicitu podle URL
                            if self.storage.decision_exists_by_url(url):
                                logger.info(f"   ‚ö†Ô∏è  Ji≈æ existuje v datab√°zi, p≈ôeskakuji")
                                continue

                            ecli = f"CZ:NSS:SBIRKA:{int(time.time())}:{i}"

                            decision = Decision(
                                ecli=ecli,
                                title=title,
                                url=url,
                                full_text=full_text,
                                keywords=keywords
                            )

                            decision.metadata = {
                                'court': 'NSS',
                                'source': 'sbirka.nssoud.cz',
                                'search_keywords': ', '.join(keywords)
                            }

                            # Ulo≈æit do datab√°ze
                            if self.storage.save_decision(decision):
                                logger.info(f"   ‚úÖ Ulo≈æeno: {len(full_text)} znak≈Ø")
                                decisions.append(decision)

                                if job_status:
                                    job_status.add_result(decision)

                                # Ulo≈æit do textov√©ho souboru
                                safe_name = ecli.replace(':', '_').replace('/', '_')
                                text_file = PDF_STORAGE_PATH / f"{safe_name}.txt"
                                text_file.write_text(full_text, encoding='utf-8')

                        # Zav≈ô√≠t tab
                        self.driver.close()
                        self.driver.switch_to.window(self.driver.window_handles[0])

                    except Exception as e:
                        logger.error(f"‚ùå Chyba u v√Ωsledku {i}: {e}")
                        if len(self.driver.window_handles) > 1:
                            self.driver.close()
                            self.driver.switch_to.window(self.driver.window_handles[0])
                        continue

                return decisions

            except Exception as e:
                logger.error(f"‚ùå Chyba p≈ôi vyhled√°v√°n√≠: {e}")
                self.driver.save_screenshot("error_screenshot.png")
                return []

        finally:
            pass  # Nezav√≠rat driver, pou≈æ√≠t close() explicitnƒõ

    def download_by_spisova_znacka(self, spisova_znacka):
        """
        St√°hne rozhodnut√≠ podle spisov√© znaƒçky

        Args:
            spisova_znacka: Spisov√° znaƒçka (nap≈ô. "8 Afs 141/2025")

        Returns:
            Decision nebo None
        """
        logger.info(f"üîç Stahuji: {spisova_znacka}")

        try:
            # Vyhledat na vyhledavac.nssoud.cz
            search_url = f"https://vyhledavac.nssoud.cz/?q={spisova_znacka.replace(' ', '+')}"
            self.driver.get(search_url)
            time.sleep(3)

            # Zkusit naj√≠t odkaz na detail
            try:
                detail_link = WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "a[href*='detail']"))
                )

                detail_link.click()
                time.sleep(2)

                # Extrahovat text
                body = self.driver.find_element(By.TAG_NAME, "body")
                full_text = body.text

                if len(full_text) > 500:
                    ecli = f"CZ:NSS:{spisova_znacka.replace(' ', '-')}"

                    decision = Decision(
                        ecli=ecli,
                        title=f"Rozhodnut√≠ {spisova_znacka}",
                        url=self.driver.current_url,
                        full_text=full_text,
                        keywords=[]
                    )

                    decision.metadata = {
                        'court': 'NSS',
                        'source': 'vyhledavac.nssoud.cz',
                        'spisova_znacka': spisova_znacka
                    }

                    if self.storage.save_decision(decision):
                        logger.info(f"‚úÖ Sta≈æeno: {len(full_text)} znak≈Ø")
                        return decision

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Nenalezeno ve vyhled√°vaƒçi: {e}")

        except Exception as e:
            logger.error(f"‚ùå Chyba p≈ôi stahov√°n√≠: {e}")

        return None

    def close(self):
        """Zav≈ôe prohl√≠≈æeƒç"""
        if self.driver:
            self.driver.quit()
        if self.storage:
            self.storage.close()


if __name__ == "__main__":
    downloader = NSSSbirkaDownloader()

    try:
        # Test vyhled√°v√°n√≠
        decisions = downloader.search_and_download(["dotace", "eu"], limit=3)
        logger.info(f"\n‚úÖ Celkem sta≈æeno: {len(decisions)} rozhodnut√≠")

    finally:
        downloader.close()
