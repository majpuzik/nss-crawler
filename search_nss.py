"""
search_nss.py
Hybrid vyhled√°v√°n√≠: xlsx data + Selenium pro NSS rozhodnut√≠
"""

import requests
import logging
import time
import random
from typing import List
from datetime import datetime
from pathlib import Path
import openpyxl

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from models import Decision
from config import DATA_PATH

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# User-Agent rotace
USER_AGENTS = [
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',
]


class NSSSearcher:
    """Hybrid vyhled√°vaƒç pro NSS: xlsx metadata + Selenium pro texty"""

    XLSX_URL = "https://www.nssoud.cz/fileadmin/user_upload/dokumenty/Otevrena_data/Data_2025/Rijen/otevrena_data_NSS.xlsx"

    def __init__(self, delay: float = 2.0, use_selenium: bool = False):
        """
        Args:
            delay: Prodleva mezi po≈æadavky (v sekund√°ch)
            use_selenium: Pou≈æ√≠t Selenium pro z√≠sk√°n√≠ text≈Ø
        """
        self.delay = delay
        self.use_selenium = use_selenium
        self.driver = None

        if use_selenium:
            self._init_selenium()

    def _init_selenium(self):
        """Inicializuje Selenium driver"""
        logger.info("üöÄ Inicializuji Selenium...")

        options = Options()
        options.add_argument('--headless=new')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument(f'user-agent={random.choice(USER_AGENTS)}')

        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=options)
        logger.info("‚úÖ Selenium p≈ôipraven")

    def search_decisions(self, keywords: List[str], max_results: int = 100) -> List[Decision]:
        """
        Vyhled√° rozhodnut√≠ podle kl√≠ƒçov√Ωch slov

        1. St√°hne xlsx s metadaty
        2. Vyfiltruje relevantn√≠ p≈ô√≠pady
        3. (Volitelnƒõ) Z√≠sk√° pln√© texty p≈ôes Selenium

        Args:
            keywords: Seznam kl√≠ƒçov√Ωch slov
            max_results: Maxim√°ln√≠ poƒçet v√Ωsledk≈Ø

        Returns:
            Seznam objekt≈Ø Decision
        """
        logger.info(f"üîç Vyhled√°v√°m v NSS xlsx datech...")
        logger.info(f"üìå Kl√≠ƒçov√° slova: {', '.join(keywords)}")

        # 1. St√°hnout nebo naƒç√≠st xlsx
        xlsx_path = self._download_xlsx()

        # 2. Naƒç√≠st a vyfiltrovat data
        decisions = self._filter_xlsx_data(xlsx_path, keywords, max_results)

        logger.info(f"‚úÖ Nalezeno {len(decisions)} rozhodnut√≠")

        # 3. (Volitelnƒõ) Z√≠skat texty p≈ôes Selenium
        if self.use_selenium and decisions:
            logger.info("üìù Z√≠sk√°v√°m pln√© texty p≈ôes Selenium...")
            decisions = self._enrich_with_selenium(decisions)

        return decisions

    def _download_xlsx(self) -> Path:
        """St√°hne xlsx soubor s NSS daty"""
        xlsx_path = DATA_PATH / "nss_otevrena_data.xlsx"

        if xlsx_path.exists():
            # Kontrola st√°≈ô√≠ souboru (p≈ôestahnout pokud > 7 dn√≠)
            age_days = (datetime.now().timestamp() - xlsx_path.stat().st_mtime) / 86400
            if age_days < 7:
                logger.info(f"üìÇ Pou≈æ√≠v√°m cache: {xlsx_path} (st√°≈ô√≠: {age_days:.1f} dn√≠)")
                return xlsx_path

        logger.info(f"üì• Stahuji xlsx z: {self.XLSX_URL}")

        response = requests.get(self.XLSX_URL, timeout=60)
        response.raise_for_status()

        xlsx_path.write_bytes(response.content)
        logger.info(f"‚úÖ Sta≈æeno: {len(response.content) / 1024 / 1024:.1f} MB")

        return xlsx_path

    def _filter_xlsx_data(self, xlsx_path: Path, keywords: List[str], max_results: int) -> List[Decision]:
        """Vyfiltruje relevantn√≠ rozhodnut√≠ z xlsx"""
        logger.info("üîé Filtruji xlsx data...")

        wb = openpyxl.load_workbook(xlsx_path, read_only=True)
        sheet = wb[wb.sheetnames[0]]

        # Naj√≠t sloupce
        headers = {cell.value: i for i, cell in enumerate(sheet[1], 1) if cell.value}

        decisions = []
        keyword_pattern = '|'.join(keywords).lower()

        for row_num, row in enumerate(sheet.iter_rows(min_row=2, max_row=min(100000, sheet.max_row)), 2):
            if len(decisions) >= max_results:
                break

            # Extrakce dat
            typ_veci = str(row[headers['Typ vƒõci']-1].value or '')
            ucastnici = str(row[headers['√öƒçastn√≠c√≠ ≈ô√≠zen√≠ s anonymizovan√Ωmi fyzick√Ωmi osobami']-1].value or '')
            spisova_znacka = str(row[headers['Spisov√° znaƒçka']-1].value or '')

            # Fulltextov√© hled√°n√≠ - hled√° jednotliv√° slova z kl√≠ƒçov√Ωch slov
            search_text = f"{typ_veci} {ucastnici}".lower()

            # Rozdƒõlit kl√≠ƒçov√° slova na jednotliv√° slova
            keyword_words = []
            for kw in keywords:
                keyword_words.extend(kw.lower().split())

            if any(word in search_text for word in keyword_words):
                # Vytvo≈ôen√≠ Decision objektu
                decision = Decision(
                    ecli=f"CZ:NSS:{spisova_znacka.replace(' ', '-')}",
                    title=typ_veci or "Bez n√°zvu",
                    date=self._parse_date(row[headers.get('Datum rozhodnut√≠', 'Do≈°lo')-1].value),
                    url=f"https://vyhledavac.nssoud.cz/?spisova_znacka={spisova_znacka}",
                    keywords=keywords
                )

                # P≈ôidat metadata
                decision.metadata = {
                    'spisova_znacka': spisova_znacka,
                    'soudce': str(row[headers.get('Soudce', 1)-1].value or ''),
                    'typ_rizeni': str(row[headers.get('Typ ≈ô√≠zen√≠', 1)-1].value or ''),
                    'typ_rozhodnuti': str(row[headers.get('Typ rozhodnut√≠', 1)-1].value or ''),
                }

                decisions.append(decision)

        wb.close()
        return decisions

    def _parse_date(self, date_value) -> datetime:
        """Parsuje datum z xlsx"""
        if isinstance(date_value, datetime):
            return date_value
        if isinstance(date_value, str):
            try:
                return datetime.strptime(date_value, "%Y-%m-%d")
            except:
                pass
        return None

    def _enrich_with_selenium(self, decisions: List[Decision]) -> List[Decision]:
        """Z√≠sk√° pln√© texty rozhodnut√≠ pomoc√≠ Selenium"""
        enriched = []

        for i, decision in enumerate(decisions, 1):
            logger.info(f"üìù [{i}/{len(decisions)}] {decision.metadata.get('spisova_znacka')}")

            try:
                # Navigovat na detail rozhodnut√≠
                self.driver.get(decision.url)
                time.sleep(self.delay + random.uniform(-0.5, 0.5))  # Jitter

                # Hledat text rozhodnut√≠
                try:
                    # R≈Øzn√© mo≈æn√© selektory
                    text_element = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.CLASS_NAME, "decision-text"))
                    )
                    decision.full_text = text_element.text
                    logger.info(f"  ‚úÖ Text: {len(decision.full_text)} znak≈Ø")
                except:
                    logger.warning(f"  ‚ö†Ô∏è  Text nenalezen")

                enriched.append(decision)

            except Exception as e:
                logger.error(f"  ‚ùå Chyba: {e}")
                enriched.append(decision)  # P≈ôidat i bez textu

        return enriched

    def __del__(self):
        """Cleanup Selenium driveru"""
        if self.driver:
            self.driver.quit()


def search_decisions(keywords: List[str], max_results: int = 100, use_selenium: bool = False) -> List[Decision]:
    """
    Hlavn√≠ funkce pro vyhled√°v√°n√≠ rozhodnut√≠

    Args:
        keywords: Seznam kl√≠ƒçov√Ωch slov
        max_results: Maxim√°ln√≠ poƒçet v√Ωsledk≈Ø
        use_selenium: Pou≈æ√≠t Selenium pro z√≠sk√°n√≠ text≈Ø (pomal√©!)

    Returns:
        Seznam objekt≈Ø Decision
    """
    searcher = NSSSearcher(delay=2.0, use_selenium=use_selenium)
    return searcher.search_decisions(keywords, max_results)


if __name__ == "__main__":
    # Test
    test_keywords = ["√∫zemn√≠ pl√°n"]
    results = search_decisions(test_keywords, max_results=5, use_selenium=False)

    print(f"\nüìä Nalezeno: {len(results)} rozhodnut√≠")
    for i, decision in enumerate(results, 1):
        print(f"\n{i}. {decision.title}")
        print(f"   ECLI: {decision.ecli}")
        print(f"   Datum: {decision.date}")
        print(f"   Spisov√° znaƒçka: {decision.metadata.get('spisova_znacka')}")
        print(f"   Soudce: {decision.metadata.get('soudce')}")
